{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","title","onClick","toggleMode","id","TextForm","useState","text","setText","heading","value","rows","onChange","event","target","e","preventDefault","newText","toUpperCase","length","showAlert","toLocaleLowerCase","console","log","str","split","i","charAt","slice","join","Alert","alert","type","msg","App","setMode","setAlert","message","document","body","style","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1ea2b837.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n\r\n\r\n    <nav className={`navbar navbar-${props.mode} bg-${props.mode} justify-content-between`}>\r\n  <a className=\"navbar-brand\" >{props.title}</a>\r\n  \r\n    \r\n  {/* <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button> */}\r\n  <button><i className=\"fas fa-lightbulb\" onClick={props.toggleMode}></i></button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul className=\"navbar-nav mr-auto\">\r\n       {/* <li className=\"nav-item active\">\r\n        <Link className=\"nav-link\" to=\"/\">Home <span className=\"sr-only\"></span></Link>\r\n      </li>   */}\r\n      {/* <li className=\"nav-item\">\r\n        <Link className=\"nav-link\" to=\"/About\">About</Link>\r\n      </li> */}\r\n      \r\n     \r\n    </ul>\r\n   \r\n  </div>\r\n  \r\n</nav>\r\n\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n\r\n   \r\n    \r\n\r\n  const handlerUpClick = (e) => {\r\n    e.preventDefault();\r\n    // console.log(\"clicked\");\r\n    //setText(\"You have clicked on uppercase button\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    if(text.length === 0)\r\n    props.showAlert(\"Please Enter Text!\",\"danger\");\r\n    else\r\n    props.showAlert(\"Text Successfully capitalized  Show Your Preview\",\"success\");\r\n    \r\n  };\r\n\r\n  const handlerLwClick = (e) => {\r\n    e.preventDefault();\r\n    // console.log(\"clicked\");\r\n    //setText(\"You have clicked on uppercase button\");\r\n    let newText = text.toLocaleLowerCase();\r\n    setText(newText);\r\n    if(text.length === 0)\r\n    props.showAlert(\"Please Enter Text!\",\"danger\");\r\n    else\r\n    props.showAlert(\"Text Successfully uncapitalized\",\"success\");\r\n  };\r\n  const handlerTextChange = (event) => {\r\n    setText(event.target.value);\r\n    //console.log(\"changed\");\r\n  };\r\n \r\n  const handlerClearClick = (event) => {\r\n    let newText = (text = ' ');\r\n    setText(newText);\r\n  };\r\n  const handlerTcaseClick = (event) => {\r\n    event.preventDefault();\r\n    console.log(text.length);\r\n    let str = text.split(\" \");\r\n\r\n    for (var i = 0; i < str.length; i++) {\r\n      str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\r\n    }\r\n    let newText = str.join(\" \");\r\n\r\n    setText(newText);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" >\r\n        <form>\r\n          <h4>{props.heading}</h4>\r\n          <div className=\"form-group\">\r\n            <textarea\r\n              className=\"form-control\"\r\n              value={text}\r\n              id=\"text1\"\r\n              rows=\"8\"\r\n              onChange={handlerTextChange}\r\n            ></textarea>\r\n          </div>\r\n          <button className=\"btn btn-primary\" onClick={handlerUpClick}>\r\n            Convert to Capitalize\r\n          </button>\r\n          <button className=\"btn btn-primary ml-3\" onClick={handlerLwClick}>\r\n            Convert to Lowecase\r\n          </button>\r\n          <button className=\"btn btn-primary ml-3\" onClick={handlerClearClick}>\r\n            Clear Text\r\n          </button>\r\n          <button className=\"btn btn-primary ml-3\" onClick={handlerTcaseClick}>\r\n            Title Case\r\n          </button>\r\n         \r\n        </form>\r\n      </div>\r\n      <div className=\"container my-3\" >\r\n        <h3>Your Text Summary</h3>\r\n        <p>\r\n          {text.split(\" \").length - 1} word {text.length} Characters{\" \"}\r\n        </p>\r\n        <p>{0.08 * text.split(\" \").length} Minutes read</p>\r\n        <h3>preview</h3>\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n   props.alert && <div\r\n      className={`alert alert-${props.alert.type} alert-dismissible fade show role=\"alert\"`}\r\n    >\r\n      <strong>{props.alert.msg}</strong>\r\n      <button\r\n        type=\"button\"\r\n        className=\"close\"\r\n        data-dismiss=\"alert\"\r\n        aria-label=\"Close\"\r\n      >\r\n        <span aria-hidden=\"true\">&times;</span>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react'\nimport About from './components/About';\n\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\");\n\n  const [alert, setAlert] = useState(null);\n  //const [alertType, setalertType] = useState(\"success\");\n\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    });\n      \n    \n\n  }\n\n\n  const toggleMode = ()=>{\n    if(mode === \"light\"){\n      setMode(\"dark\");\n      showAlert(\"Dark Mode Enabled\",\"success\");\n      document.body.style.backgroundColor='#213244';\n      document.body.style.color='white';\n      \n    }\n    else{\n      setMode(\"light\");\n      showAlert(\"Light Mode Enabled\",\"success\");\n      document.body.style.backgroundColor='white';\n      document.body.style.color='black';\n     \n     \n    }\n  }\n  return (\n    \n        <>\n      {/* //  <Router> */}\n  <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}   />\n\n   <Alert alert={alert}  />\n  <div className=\"container my-3\">\n  {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          \n          </Route>\n        </Switch> */}\n        <TextForm heading=\"Enter Text below to utilize\" toggleMode={toggleMode}  alert={alert} showAlert={showAlert} />\n\n  </div>\n  {/* </Router> */}\n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}